{"version":3,"file":"static/js/514.e6d63885.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    },[]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1010789 - 1009146) + 1009146);\n            getCharacter(id)\n            .then(onCharLoaded);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = errorMessage || spinner || <View char={char} />;\n\n    return (\n        <div className=\"randomchar\">\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    // const hasError = thumbnail.includes(\"image_not_available\");\n    const imgClassName = `randomchar__img`;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={imgClassName} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a target={\"_blank\"} href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a target={\"_blank\"} href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import {useState, useEffect, useRef} from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../services/MarvelService\";\nimport PropTypes from \"prop-types\";\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(250);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[arr.indexOf(item)] = el}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(arr.indexOf(item))\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(arr.indexOf(item));\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport {Link} from \"react-router-dom\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = ({ charId }) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [charId]);\n\n    const updateChar = () => {\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    const hasError = thumbnail.includes(\"image_not_available\");\n    const imgClassName = `randomchar__img ${hasError ? \"error\" : \"\"}`;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img className={imgClassName} src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a\n                            target={\"_blank\"}\n                            rel=\"noreferrer\"\n                            href={homepage}\n                            className=\"button button__main\"\n                        >\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a\n                            target={\"_blank\"}\n                            rel=\"noreferrer\"\n                            href={wiki}\n                            className=\"button button__secondary\"\n                        >\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"Comics is not yet\"}\n                {comics.map((item, i) => {\n                    const comicsId = item.resourceURI.split('/').pop();\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${comicsId}`}>\n                                {item.name}\n                            </Link>\n                        </li>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import {Component} from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n//Компонент ловит ошибки\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n\n\n    return(\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","_jsx","src","alt","target","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","imgStyle","tabIndex","ref","el","indexOf","onCharSelected","onKeyPress","e","key","style","renderItems","disabled","_Fragment","_ref2","comics","hasError","includes","imgClassName","rel","i","comicsId","resourceURI","split","pop","Link","to","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","this","setState","Component","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}